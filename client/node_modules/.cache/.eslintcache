[{"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\index.js":"1","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\app\\App.js":"2","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\app\\store.js":"3","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\app\\Git.js":"4","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\repoTracker\\repotrackContainer.js":"5","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\mongoTracker\\mongoTrackContainer.js":"6","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\profData\\userContainer.js":"7","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\repoManager\\repoMangContainer.js":"8","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\siteAnalytics\\analyticsContainer.js":"9","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\nav\\navTop\\navTop.js":"10","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\repoTracker\\repoFileDisp.js":"11","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\repoTracker\\repoLanguageDisp.js":"12","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\nav\\userMenu.js":"13","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\nav\\navbar.js":"14","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\nav\\navTop\\navTopList.js":"15"},{"size":700,"mtime":1655680919627,"results":"16","hashOfConfig":"17"},{"size":675,"mtime":1655680919618,"results":"18","hashOfConfig":"17"},{"size":118,"mtime":1655680919619,"results":"19","hashOfConfig":"17"},{"size":545,"mtime":1655680919618,"results":"20","hashOfConfig":"17"},{"size":2025,"mtime":1656297946638,"results":"21","hashOfConfig":"17"},{"size":2310,"mtime":1656297946629,"results":"22","hashOfConfig":"17"},{"size":4272,"mtime":1656297946633,"results":"23","hashOfConfig":"17"},{"size":1240,"mtime":1656297946634,"results":"24","hashOfConfig":"17"},{"size":8561,"mtime":1656297946639,"results":"25","hashOfConfig":"17"},{"size":301,"mtime":1656297946630,"results":"26","hashOfConfig":"17"},{"size":4500,"mtime":1656297946635,"results":"27","hashOfConfig":"17"},{"size":3202,"mtime":1656297946636,"results":"28","hashOfConfig":"17"},{"size":963,"mtime":1656297946632,"results":"29","hashOfConfig":"17"},{"size":387,"mtime":1655680919621,"results":"30","hashOfConfig":"17"},{"size":491,"mtime":1656297946631,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wvg0lc",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\index.js",[],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\app\\App.js",[],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\app\\store.js",[],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\app\\Git.js",[],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\repoTracker\\repotrackContainer.js",["81"],[],"import { useEffect } from 'react';\r\nimport { useMemo } from 'react';\r\nimport { useState } from 'react'\r\nimport '../../styles/components/repotracker/repotrackcontainer.scss'\r\nimport RepoFileDisp from './repoFileDisp';\r\nimport RepoLang from './repoLanguageDisp';\r\n\r\nexport default function RepoTrackerContainer(){        \r\n    const [gitdata, setGitData] = useState([])\r\n    async function fetchgit(){\r\n        const data = await fetch('/gitdata', {\r\n          method: 'GET',\r\n      }).then(res=> res.json()).then(data => {return(data)})\r\n      setGitData(data)\r\n   }\r\n   \r\n         useEffect(()=>{\r\n            fetchgit()\r\n           }, [])\r\n\r\n    return(\r\n        <>\r\n            <div className=\"repotrack-container\">\r\n                <div className=\"repotracker\">\r\n                <h2>Repository List</h2>\r\n                <p>A view of all your repos specifiying the description, update and push dates,\r\n                    default branch, and users watching.\r\n                </p>\r\n                {gitdata.map(repo => {\r\n                    return(\r\n                            <ul className = 'repo-data-list'>\r\n                                <li><h3>{repo.name.toUpperCase()}</h3></li>\r\n                                <li><span className = 'desc'>Description:</span><br></br> {repo.description || 'N/A'}</li>\r\n                                <li><span className = 'push'>Last Pushed:</span><br></br> {repo.pushed_at || 'N/A'}</li>\r\n                                <li><span className = 'updated'>Last Updated:</span><br></br> {repo.updated_at || 'N/A'}</li>\r\n                                <li><span className = 'branch'>Default Branch:</span><br></br> {repo.default_branch || 'N/A'}</li>\r\n                                <li><span className = 'watching'>Watching:</span><br></br> {repo.watchers_count}</li>\r\n                            </ul>\r\n                    )\r\n                })}\r\n                </div>\r\n                <RepoFileDisp />\r\n                <RepoLang />\r\n            </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\mongoTracker\\mongoTrackContainer.js",[],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\profData\\userContainer.js",["82","83","84"],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\repoManager\\repoMangContainer.js",[],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\siteAnalytics\\analyticsContainer.js",["85","86"],[],"import '../../styles/components/analytics/analyticscontainer.scss'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { Carousel, ProgressBar } from 'react-bootstrap'\r\nimport { RadialBar } from '@nivo/radial-bar'\r\nimport './ScrnShtMissing.svg'\r\n\r\nexport default function AnalyticsContainer(){\r\n\r\n    const [netData, setNetData] = useState([])\r\n\r\n    // Might fetch twice?\r\n\r\n    const fetchNetlifySites =async  () => {\r\n        const data = await fetch('/sitedata', {\r\n            method: 'GET',\r\n        }).then(res=>res.json()).then(data=> {return data})\r\n            setNetData(data)\r\n            }\r\n            \r\n    useEffect(()=>{\r\n        fetchNetlifySites()\r\n    }, [])\r\n\r\n    // For Carousel\r\n\r\n    const [index, setIndex] = useState(0);\r\n\r\n\r\n    const handleSelect = (selectedIndex, e) => {\r\n        setIndex(selectedIndex);\r\n      };\r\n      \r\n      const ControlledCarousel = () => {\r\n        return (\r\n          <Carousel style={{width: '100%'}} activeIndex={index} onSelect={handleSelect}>\r\n            {netData.map((site)=>{\r\n                let listDisp = ''\r\n                let chartDisp = ''\r\n                let screenshotDisp = ''\r\n\r\n\r\n                if(site.screenshot_url != null){\r\n                    screenshotDisp = <div style = {{backgroundImage: `url(${site.screenshot_url || ''})`}} className = 'screenshot'>\r\n                    </div>\r\n                }\r\n                else{\r\n                    screenshotDisp = <div\r\n                    style = {{backgroundSize: 'cover'}}\r\n                    className = 'screenshot'>\r\n                    </div>\r\n                }\r\n\r\n                // Necessary to check for Site Data w/o Crashing\r\n\r\n                if(site.build_settings.public_repo){\r\n                     listDisp=\r\n                        <ul className = 'repo-info-list'>\r\n                        <li><span>Repo Type: </span><p>{site.build_settings.repo_type}</p></li>\r\n                        <li><span>Repo Path: </span><p>{site.build_settings.repo_path}</p></li>\r\n                        <li><span>Repo URL: </span><a href = {site.build_settings.repo_url}>Link</a></li>\r\n                    </ul>\r\n                    \r\n                } else {\r\n                    listDisp = `Deploy netlify site w/ a public repository to connect and view repo  information.`\r\n                }\r\n\r\n                // Necessary to check for Site Data w/o Crashing\r\n\r\n                if(site.published_deploy.site_capabilities.forms){\r\n                    chartDisp = \r\n                    <li>\r\n                    <label className = 'form-label' htmlFor = 'submissions'>Submissions: </label>\r\n                    <ProgressBar\r\n                    animated\r\n                    name = 'submissions'\r\n                    now = {site.published_deploy.site_capabilities.forms.submissions.used}\r\n                    max = {site.published_deploy.site_capabilities.forms.submissions.included}\r\n                    variant = 'purple'\r\n                    style = {{backgroundColor: 'rgba(255, 255, 255, 0.2) !important',\r\n                    borderRadius: '16px',\r\n                    width: '70%',\r\n                }}\r\n                label={`${site.published_deploy.site_capabilities.forms.submissions.used /site.published_deploy.site_capabilities.forms.submissions.included}%`}\r\n                    ></ProgressBar>\r\n                    <li>Used: {site.published_deploy.site_capabilities.forms.submissions.used}</li>\r\n                    <li>Available: {site.published_deploy.site_capabilities.forms.submissions.included} submissions</li>\r\n                    <label className='form-label-2 ' htmlFor = 'storage'>Storage: </label>\r\n                    <ProgressBar\r\n                    animated\r\n                    name = 'storage'\r\n                    now = {site.published_deploy.site_capabilities.forms.storage.used}\r\n                    max = {site.published_deploy.site_capabilities.forms.storage.included}\r\n                    variant = 'red'\r\n                    style = {{backgroundColor: 'rgba(255, 255, 255, 0.2) !important',\r\n                    borderRadius: '16px',\r\n                    width: '70%',\r\n                }}\r\n                label={`${site.published_deploy.site_capabilities.forms.storage.used /site.published_deploy.site_capabilities.forms.storage.included}%`}\r\n                    ></ProgressBar>\r\n                    <li>Used: {site.published_deploy.site_capabilities.forms.storage.used}</li>\r\n                    <li>Available: {site.published_deploy.site_capabilities.forms.storage.included} bytes</li>\r\n                    </li>\r\n                }\r\n                else{\r\n                    chartDisp = <p>This site does not have any available form data or form elements,\r\n                    if this is believed to be an error, check Netlify deployment for more information, or\r\n                    file an issue in github under the dashMe public repository.</p>\r\n                }\r\n\r\n                // Site Capabilities: Labeling Logic\r\n\r\n               let capDisp = () => {\r\n                return(\r\n                    <>\r\n                        <li><span>Form Processing: </span>{site.published_deploy.site_capabilities.form_processing.toString().toUpperCase()}</li>\r\n                        <li><span>Secure Site: </span>{site.published_deploy.site_capabilities.secure_site.toString().toUpperCase()}</li>\r\n                        <li><span>Prerendering: </span>{site.published_deploy.site_capabilities.prerendering.toString().toUpperCase()}</li>\r\n                        <li><span>Proxying: </span>{site.published_deploy.site_capabilities.proxying.toString().toUpperCase()}</li>\r\n                        <li><span>Branch Deploy: </span>{site.published_deploy.site_capabilities.branch_deploy.toString().toUpperCase()}</li>\r\n                        <li><span>Split Testing: </span>{site.published_deploy.site_capabilities.split_testing.toString().toUpperCase()}</li>\r\n                        <li><span>Rate Cents: </span>{site.published_deploy.site_capabilities.rate_cents}</li>\r\n                        <li><span>Yearly Rate Cents: </span>{site.published_deploy.site_capabilities.yearly_rate_cents}</li>\r\n                </>\r\n                )\r\n               }\r\n\r\n                return(\r\n                    <Carousel.Item className = 'resp' style = {{minHeight: '60vh', maxHeight: '60vh',border: 'none'}}>\r\n                        <div className= 'site-container'>\r\n                        {screenshotDisp}\r\n                            <div className = 'site-info-basic'>\r\n                                <h1>{site.name.toUpperCase()}</h1>\r\n                                <ul className = 'dates-list'>\r\n                                <li><span className='created'>Created At: </span>{site.created_at}</li>\r\n                                <li><span className='updated'>Updated At: </span>{site.updated_at}</li>\r\n                                <li><span className='published'>Published At: </span>{site.published_deploy.published_at}</li>\r\n                                </ul>\r\n                                \r\n                            </div>\r\n\r\n                            {/* Site: Connected Repo */}\r\n\r\n                            <div className = 'repo-info-container'>\r\n                                <h3>Repo Information</h3>\r\n                                {listDisp}\r\n                            </div>\r\n\r\n                            {/* Form Tracker */}\r\n\r\n                            <div className = 'form-tracking'>\r\n                                <h4>Form Tracking</h4>\r\n                                    <ul className = 'form-list'>\r\n                                        {chartDisp}\r\n                                    </ul>\r\n                            </div>\r\n\r\n                        {/* Site Capabilities */}\r\n\r\n                            <div className = 'prop-tracking'>\r\n                                <h4>Site Properties</h4>\r\n                                    <ul className = 'prop-list'>\r\n                                        <li><span>Plan: </span>{site.plan}</li>\r\n                                        {capDisp()}\r\n                                    </ul>\r\n                            </div>\r\n                        </div>\r\n                    </Carousel.Item>\r\n                )\r\n            })}\r\n          </Carousel>\r\n        );\r\n      }\r\n      \r\n      \r\n      \r\n    return(\r\n        <>\r\n            <div className=\"analytics-container\">\r\n                {ControlledCarousel()}\r\n            </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\nav\\navTop\\navTop.js",[],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\repoTracker\\repoFileDisp.js",["87","88","89","90","91","92","93","94","95","96"],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\repoTracker\\repoLanguageDisp.js",["97","98","99","100"],[],"import { ProgressBar } from \"react-bootstrap\"\r\nimport '../../styles/components/repotracker/repolang.scss'\r\nimport { useState, useEffect } from \"react\"\r\n\r\nexport default function RepoLang(){\r\n    const [dispState, setDispState] = useState()\r\n\r\n    const [gitdata, setGitData] = useState([])\r\n    const [contents, setContents] = useState([])\r\n\r\n        async function getGitData(){\r\n            const data = await fetch('/gitdata', {\r\n                method: 'GET',\r\n            }).then(res=> res.json()).then(data => {return(data)})\r\n            let dataArr = []\r\n            data.map((repo)=>{\r\n             dataArr.push(repo.name)\r\n            })\r\n            setGitData(dataArr)\r\n        }\r\n\r\n         useEffect(()=>{\r\n            getGitData()\r\n           }, [])\r\n          \r\n           function progBars(){\r\n            let contentsArr = []\r\n            gitdata.forEach( async (reponame)=>{\r\n                 await fetch(`https://api.github.com/repos/jaredreyes039/${reponame}/languages`)\r\n                    .then(res=>res.json())\r\n                    .then(data=> {\r\n                        contentsArr.push(data)\r\n\r\n                        console.log(contentsArr)\r\n                        let display = contentsArr.map((arr, idx)=>{\r\n                            let colors = ['green', 'red', 'yellow', 'purple', 'teal']\r\n                            let sumArr = []\r\n\r\n                            return(\r\n                             <>\r\n                                <ul className = \"lang-list\">\r\n                                    <h3>{gitdata[idx].toUpperCase()}</h3>\r\n                                    {\r\n                                     Object.keys(arr).map((key, i)=>{\r\n                                         sumArr.push(arr[key])\r\n                                         const getSum = sumArr.reduce((prev, curr)=>{\r\n                                             const sum = prev + curr\r\n                                             return sum\r\n                                         }, sumArr[0])\r\n\r\n                                         return(\r\n                                             <>\r\n                                             <label for = 'prog'>{key}</label>\r\n                                             <ProgressBar label = {arr[key]}  name = 'prog' style={{borderRadius: '16px' ,width: '100%', marginBottom: '2.5%'}} variant= {colors[i]} animated now={(arr[key])} max = {getSum} />\r\n                                             </>\r\n                                         )\r\n                                     })\r\n                                    }\r\n                                </ul>\r\n                                </>\r\n                            )\r\n                        })\r\n                        setDispState(display)\r\n                       } \r\n                       )\r\n            })\r\n        }\r\n\r\n           useEffect(()=>{\r\n           progBars()\r\n       }, [gitdata])\r\n\r\n\r\n    return(\r\n        <>\r\n            <div className=\"repolang-container\">\r\n            <h2>Language Composition</h2>\r\n            <p>A breakdown of each repo's language composition</p>\r\n             {dispState}\r\n            </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\nav\\userMenu.js",[],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\nav\\navbar.js",[],[],"C:\\Users\\yoshi\\OneDrive\\Desktop\\agoraphobicdash\\client\\src\\components\\nav\\navTop\\navTopList.js",["101","102"],[],"import '../../../styles/components/nav/navlist.scss'\r\nimport { Link } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useRef } from 'react';\r\n\r\nexport default function NavListTop(){\r\n    let nav = useLocation();\r\n    \r\n    return(\r\n        <ul className=\"navlist\">\r\n            <Link  to = '/' className='navlist-item active'><li>Hub</li></Link>\r\n            {/* <Link  to = '/Git' className='navlist-item'><li>Git</li></Link> */}\r\n        </ul>\r\n    )\r\n}",{"ruleId":"103","severity":1,"message":"104","line":2,"column":10,"nodeType":"105","messageId":"106","endLine":2,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":58,"column":21,"nodeType":"109","endLine":58,"endColumn":56},{"ruleId":"110","severity":1,"message":"111","line":75,"column":12,"nodeType":"112","messageId":"113","endLine":75,"endColumn":14},{"ruleId":"107","severity":1,"message":"108","line":78,"column":17,"nodeType":"109","endLine":78,"endColumn":49},{"ruleId":"103","severity":1,"message":"114","line":2,"column":21,"nodeType":"105","messageId":"106","endLine":2,"endColumn":27},{"ruleId":"103","severity":1,"message":"115","line":4,"column":10,"nodeType":"105","messageId":"106","endLine":4,"endColumn":19},{"ruleId":"103","severity":1,"message":"114","line":2,"column":31,"nodeType":"105","messageId":"106","endLine":2,"endColumn":37},{"ruleId":"103","severity":1,"message":"104","line":2,"column":39,"nodeType":"105","messageId":"106","endLine":2,"endColumn":46},{"ruleId":"103","severity":1,"message":"115","line":3,"column":9,"nodeType":"105","messageId":"106","endLine":3,"endColumn":18},{"ruleId":"103","severity":1,"message":"116","line":3,"column":20,"nodeType":"105","messageId":"106","endLine":3,"endColumn":39},{"ruleId":"103","severity":1,"message":"117","line":7,"column":12,"nodeType":"105","messageId":"106","endLine":7,"endColumn":20},{"ruleId":"103","severity":1,"message":"118","line":7,"column":22,"nodeType":"105","messageId":"106","endLine":7,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":13,"column":22,"nodeType":"121","messageId":"122","endLine":13,"endColumn":24},{"ruleId":"103","severity":1,"message":"123","line":26,"column":24,"nodeType":"105","messageId":"106","endLine":26,"endColumn":28},{"ruleId":"119","severity":1,"message":"120","line":30,"column":50,"nodeType":"121","messageId":"122","endLine":30,"endColumn":52},{"ruleId":"124","severity":1,"message":"125","line":90,"column":16,"nodeType":"126","endLine":90,"endColumn":25,"suggestions":"127"},{"ruleId":"103","severity":1,"message":"117","line":9,"column":12,"nodeType":"105","messageId":"106","endLine":9,"endColumn":20},{"ruleId":"103","severity":1,"message":"118","line":9,"column":22,"nodeType":"105","messageId":"106","endLine":9,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":16,"column":28,"nodeType":"121","messageId":"122","endLine":16,"endColumn":30},{"ruleId":"124","severity":1,"message":"128","line":71,"column":11,"nodeType":"126","endLine":71,"endColumn":20,"suggestions":"129"},{"ruleId":"103","severity":1,"message":"114","line":4,"column":10,"nodeType":"105","messageId":"106","endLine":4,"endColumn":16},{"ruleId":"103","severity":1,"message":"130","line":12,"column":9,"nodeType":"105","messageId":"106","endLine":12,"endColumn":12},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'RadialBar' is defined but never used.","'ResponsiveRadialBar' is defined but never used.","'contents' is assigned a value but never used.","'setContents' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchContents'. Either include it or remove the dependency array.","ArrayExpression",["131"],"React Hook useEffect has a missing dependency: 'progBars'. Either include it or remove the dependency array.",["132"],"'nav' is assigned a value but never used.",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [fetchContents, gitdata]",{"range":"137","text":"138"},"Update the dependencies array to be: [gitdata, progBars]",{"range":"139","text":"140"},[4223,4232],"[fetchContents, gitdata]",[2933,2942],"[gitdata, progBars]"]