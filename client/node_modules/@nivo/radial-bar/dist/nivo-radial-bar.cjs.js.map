{"version":3,"file":"nivo-radial-bar.cjs.js","sources":["../src/RadialBarTooltip.tsx","../src/props.ts","../src/hooks.ts","../src/RadialBarArcs.tsx","../src/RadialBarTracks.tsx","../src/RadialBar.tsx","../src/ResponsiveRadialBar.tsx"],"sourcesContent":["import { BasicTooltip } from '@nivo/tooltip'\nimport { RadialBarDatum, RadialBarTooltipProps } from './types'\n\nexport const RadialBarTooltip = <D extends RadialBarDatum>({ bar }: RadialBarTooltipProps<D>) => {\n    return (\n        <BasicTooltip\n            enableChip\n            id={\n                <span>\n                    {bar.category} - {bar.groupId}\n                </span>\n            }\n            value={bar.formattedValue}\n            color={bar.color}\n        />\n    )\n}\n","import { InheritedColorConfig } from '@nivo/colors'\nimport { ComputedBar, RadialBarLayerId } from './types'\nimport { RadialBarTooltip } from './RadialBarTooltip'\n\nexport const commonDefaultProps = {\n    maxValue: 'auto' as const,\n\n    layers: ['grid', 'tracks', 'bars', 'labels', 'legends'] as RadialBarLayerId[],\n\n    startAngle: 0,\n    endAngle: 270,\n    innerRadius: 0.3,\n    padding: 0.2,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    enableTracks: true,\n    tracksColor: 'rgba(0, 0, 0, .15)',\n\n    enableRadialGrid: true,\n    enableCircularGrid: true,\n    radialAxisStart: {},\n    radialAxisEnd: null,\n    circularAxisInner: null,\n    circularAxisOuter: {},\n\n    colors: { scheme: 'nivo' as const },\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] } as InheritedColorConfig<ComputedBar>,\n\n    enableLabels: false,\n    label: 'formattedValue',\n    labelsSkipAngle: 10,\n    labelsRadiusOffset: 0.5,\n    labelsTextColor: { theme: 'labels.text.fill' },\n\n    isInteractive: true,\n    tooltip: RadialBarTooltip,\n\n    legends: [],\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n    transitionMode: 'centerRadius' as const,\n\n    renderWrapper: true,\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n}\n","import { useMemo } from 'react'\nimport { scaleBand, scaleLinear } from 'd3-scale'\nimport { arc as d3Arc } from 'd3-shape'\nimport { degreesToRadians, useValueFormatter } from '@nivo/core'\nimport { Arc } from '@nivo/arcs'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { castLinearScale, castBandScale, getScaleTicks } from '@nivo/scales'\nimport { commonDefaultProps, svgDefaultProps } from './props'\nimport {\n    ComputedBar,\n    RadialBarCommonProps,\n    RadialBarDataProps,\n    RadialBarCustomLayerProps,\n    RadialBarTrackDatum,\n    RadialBarDatum,\n} from './types'\n\ninterface RadialBarGroup<D extends RadialBarDatum> {\n    id: string\n    total: number\n    data: D[]\n}\n\nexport const useRadialBar = <D extends RadialBarDatum = RadialBarDatum>({\n    data,\n    maxValue: maxValueDirective = svgDefaultProps.maxValue,\n    valueFormat,\n    startAngle = commonDefaultProps.startAngle,\n    endAngle = commonDefaultProps.endAngle,\n    innerRadiusRatio = commonDefaultProps.innerRadius,\n    padding = commonDefaultProps.padding,\n    padAngle = commonDefaultProps.padAngle,\n    cornerRadius = commonDefaultProps.cornerRadius,\n    width,\n    height,\n    colors = commonDefaultProps.colors,\n    tracksColor = commonDefaultProps.tracksColor,\n}: {\n    data: RadialBarDataProps<D>['data']\n    maxValue: RadialBarCommonProps<D>['maxValue']\n    valueFormat?: RadialBarCommonProps<D>['valueFormat']\n    startAngle: RadialBarCommonProps<D>['startAngle']\n    innerRadiusRatio: RadialBarCommonProps<D>['innerRadius']\n    padding: RadialBarCommonProps<D>['padding']\n    padAngle: RadialBarCommonProps<D>['padAngle']\n    cornerRadius: RadialBarCommonProps<D>['cornerRadius']\n    endAngle: RadialBarCommonProps<D>['endAngle']\n    width: number\n    height: number\n    colors: RadialBarCommonProps<D>['colors']\n    tracksColor: RadialBarCommonProps<D>['tracksColor']\n}) => {\n    // using a hook, not because it's costly to compute, but because this is used as\n    // a dependency for other hooks, and otherwise a new array would be created all\n    // the time, forcing recomputing everything.\n    const center: [number, number] = useMemo(() => [width / 2, height / 2], [width, height])\n    const outerRadius = Math.min(...center)\n    const innerRadius = outerRadius * Math.min(innerRadiusRatio, 1)\n\n    const getColor = useOrdinalColorScale<ComputedBar<D>>(colors, 'category')\n\n    // the way categories are being extracted is a bit fragile, because it's extracted from the data,\n    // so if the first group doesn't contain the first expected category for example, then the order\n    // of categories is going to be incorrect.\n    // Maybe we could add an extra sort property, although this might be confusing.\n    const { serieIds, categories, groups, maxValue } = useMemo(() => {\n        const result: {\n            serieIds: string[]\n            categories: string[]\n            groups: RadialBarGroup<D>[]\n            maxValue: number\n        } = {\n            serieIds: [],\n            categories: [],\n            groups: [],\n            maxValue: 0,\n        }\n\n        data.forEach(serie => {\n            result.serieIds.push(serie.id)\n\n            let groupTotalValue = 0\n            serie.data.forEach(datum => {\n                if (!result.categories.includes(datum.x)) {\n                    result.categories.push(datum.x)\n                }\n                groupTotalValue += datum.y\n            })\n\n            result.groups.push({\n                id: serie.id,\n                total: groupTotalValue,\n                data: serie.data,\n            })\n        })\n\n        if (maxValueDirective === 'auto') {\n            result.maxValue = Math.max(...result.groups.map(group => group.total))\n        } else {\n            result.maxValue = maxValueDirective\n        }\n\n        return result\n    }, [data, maxValueDirective])\n\n    const valueScale = useMemo(\n        () =>\n            castLinearScale<number, number>(\n                scaleLinear<number, number>().domain([0, maxValue]).range([startAngle, endAngle])\n            ),\n        [maxValue, startAngle, endAngle]\n    )\n\n    const radiusScale = useMemo(\n        () =>\n            castBandScale<string>(\n                scaleBand<string>()\n                    .domain(serieIds)\n                    .range([innerRadius, outerRadius])\n                    .padding(padding)\n            ),\n        [serieIds, outerRadius, innerRadius, padding]\n    )\n\n    const arcGenerator = useMemo(\n        () =>\n            d3Arc<Arc>()\n                .startAngle(d => d.startAngle)\n                .endAngle(d => d.endAngle)\n                .innerRadius(d => d.innerRadius)\n                .outerRadius(d => d.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(degreesToRadians(padAngle)),\n        [cornerRadius, padAngle]\n    )\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const bars = useMemo(() => {\n        const innerBars: ComputedBar<D>[] = []\n\n        groups.forEach(group => {\n            let currentValue = 0\n            const arcInnerRadius = radiusScale(group.id) as number\n            const arcOuterRadius = arcInnerRadius + radiusScale.bandwidth()\n\n            group.data.forEach(datum => {\n                const stackedValue = currentValue + datum.y\n\n                const computedDatum: ComputedBar<D> = {\n                    id: `${group.id}.${datum.x}`,\n                    data: datum,\n                    groupId: group.id,\n                    category: datum.x,\n                    value: datum.y,\n                    formattedValue: formatValue(datum.y),\n                    color: '',\n                    stackedValue,\n                    arc: {\n                        startAngle: degreesToRadians(valueScale(currentValue)),\n                        endAngle: degreesToRadians(valueScale(stackedValue)),\n                        innerRadius: arcInnerRadius,\n                        outerRadius: arcOuterRadius,\n                    },\n                }\n\n                computedDatum.color = getColor(computedDatum)\n\n                currentValue += datum.y\n\n                innerBars.push(computedDatum)\n            })\n        })\n\n        return innerBars\n    }, [groups, radiusScale, valueScale, getColor, formatValue])\n\n    const startAngleRadians = degreesToRadians(startAngle)\n    const endAngleRadians = degreesToRadians(endAngle)\n\n    const tracks: RadialBarTrackDatum[] = useMemo(() => {\n        return getScaleTicks(radiusScale).map(value => {\n            const trackRadius = radiusScale(value) as number\n\n            return {\n                id: value,\n                color: tracksColor,\n                arc: {\n                    startAngle: startAngleRadians,\n                    endAngle: endAngleRadians,\n                    innerRadius: trackRadius,\n                    outerRadius: trackRadius + radiusScale.bandwidth(),\n                },\n            }\n        })\n    }, [radiusScale, startAngleRadians, endAngleRadians, tracksColor])\n\n    // Given the way categories are extracted, (please see the corresponding hook above),\n    // legends order might be incorrect, also colors are extracted from bars, to avoid\n    // duplicating the colors function, but if the color logic is custom for each bar,\n    // this might lead to weird values for legends.\n    // Maybe we could allow passing custom legend data to fix that.\n    const legendData = useMemo(\n        () =>\n            categories.map(category => {\n                const barWithCategory = bars.find(bar => bar.category === category)\n                const color = barWithCategory ? barWithCategory.color : undefined\n\n                return {\n                    id: category,\n                    label: category,\n                    color,\n                }\n            }),\n        [categories, bars]\n    )\n\n    const customLayerProps: RadialBarCustomLayerProps<D> = useMemo(\n        () => ({\n            center,\n            outerRadius,\n            innerRadius,\n            bars,\n            arcGenerator,\n            radiusScale,\n            valueScale,\n        }),\n        [center, outerRadius, innerRadius, bars, arcGenerator, radiusScale, valueScale]\n    )\n\n    return {\n        center,\n        outerRadius,\n        innerRadius,\n        bars,\n        arcGenerator,\n        radiusScale,\n        valueScale,\n        tracks,\n        legendData,\n        customLayerProps,\n    }\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { ArcsLayer, ArcGenerator } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedBar, RadialBarCommonProps, RadialBarDatum } from './types'\n\ninterface RadialBarArcsProps<D extends RadialBarDatum> {\n    center: [number, number]\n    bars: ComputedBar<D>[]\n    borderWidth: RadialBarCommonProps<D>['borderWidth']\n    borderColor: RadialBarCommonProps<D>['borderColor']\n    arcGenerator: ArcGenerator\n    isInteractive: RadialBarCommonProps<D>['isInteractive']\n    tooltip: RadialBarCommonProps<D>['tooltip']\n    onClick?: RadialBarCommonProps<D>['onClick']\n    onMouseEnter?: RadialBarCommonProps<D>['onMouseEnter']\n    onMouseMove?: RadialBarCommonProps<D>['onMouseMove']\n    onMouseLeave?: RadialBarCommonProps<D>['onMouseLeave']\n    transitionMode: RadialBarCommonProps<D>['transitionMode']\n}\n\nexport const RadialBarArcs = <D extends RadialBarDatum>({\n    center,\n    bars,\n    borderWidth,\n    borderColor,\n    arcGenerator,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n}: RadialBarArcsProps<D>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            onClick?.(bar, event)\n        },\n        [onClick]\n    )\n\n    const handleMouseEnter = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseEnter?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseMove?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(bar, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    return (\n        <ArcsLayer<ComputedBar<D>>\n            center={center}\n            data={bars}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { ArcGenerator, ArcsLayer, ArcTransitionMode } from '@nivo/arcs'\nimport { RadialBarTrackDatum } from './types'\n\ninterface RadialBarTracksProps {\n    center: [number, number]\n    tracks: RadialBarTrackDatum[]\n    arcGenerator: ArcGenerator\n    transitionMode: ArcTransitionMode\n}\n\nexport const RadialBarTracks = ({\n    center,\n    tracks,\n    arcGenerator,\n    transitionMode,\n}: RadialBarTracksProps) => {\n    return (\n        <ArcsLayer<RadialBarTrackDatum>\n            center={center}\n            data={tracks}\n            arcGenerator={arcGenerator}\n            borderWidth={0}\n            borderColor=\"none\"\n            transitionMode={transitionMode}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper, clampArc } from '@nivo/core'\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { PolarGrid, RadialAxis, CircularAxis } from '@nivo/polar-axes'\nimport { RadialBarLayerId, RadialBarSvgProps, ComputedBar, RadialBarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { useRadialBar } from './hooks'\nimport { RadialBarArcs } from './RadialBarArcs'\nimport { RadialBarTracks } from './RadialBarTracks'\n\ntype InnerRadialBarProps<D extends RadialBarDatum = RadialBarDatum> = Omit<\n    RadialBarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadialBar = <D extends RadialBarDatum>({\n    data,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    startAngle: originalStartAngle = svgDefaultProps.startAngle,\n    endAngle: originalEndAngle = svgDefaultProps.endAngle,\n    innerRadius: innerRadiusRatio = svgDefaultProps.innerRadius,\n    padding = svgDefaultProps.padding,\n    padAngle = svgDefaultProps.padAngle,\n    cornerRadius = svgDefaultProps.cornerRadius,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    enableTracks = svgDefaultProps.enableTracks,\n    tracksColor = svgDefaultProps.tracksColor,\n    enableRadialGrid = svgDefaultProps.enableRadialGrid,\n    enableCircularGrid = svgDefaultProps.enableCircularGrid,\n    radialAxisStart = svgDefaultProps.radialAxisStart,\n    radialAxisEnd = svgDefaultProps.radialAxisEnd,\n    circularAxisInner = svgDefaultProps.circularAxisInner,\n    circularAxisOuter = svgDefaultProps.circularAxisOuter,\n    colors = svgDefaultProps.colors,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label,\n    labelsSkipAngle = svgDefaultProps.labelsSkipAngle,\n    labelsRadiusOffset = svgDefaultProps.labelsRadiusOffset,\n    labelsTextColor = svgDefaultProps.labelsTextColor,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode = svgDefaultProps.transitionMode,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerRadialBarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const [startAngle, endAngle] = clampArc(originalStartAngle, originalEndAngle)\n\n    const {\n        center,\n        innerRadius,\n        outerRadius,\n        bars,\n        arcGenerator,\n        radiusScale,\n        valueScale,\n        tracks,\n        legendData,\n        customLayerProps,\n    } = useRadialBar<D>({\n        data,\n        maxValue,\n        valueFormat,\n        startAngle,\n        endAngle,\n        innerRadiusRatio,\n        padding,\n        padAngle,\n        cornerRadius,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        tracksColor,\n    })\n\n    const layerById: Record<RadialBarLayerId, ReactNode> = {\n        grid: null,\n        tracks: null,\n        bars: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Fragment key=\"grid\">\n                <PolarGrid\n                    center={center}\n                    enableRadialGrid={enableRadialGrid}\n                    enableCircularGrid={enableCircularGrid}\n                    angleScale={valueScale}\n                    radiusScale={radiusScale}\n                    startAngle={startAngle}\n                    endAngle={endAngle}\n                />\n                {radialAxisStart && (\n                    <RadialAxis\n                        type=\"start\"\n                        center={center}\n                        angle={Math.min(startAngle, endAngle)}\n                        scale={radiusScale}\n                        {...radialAxisStart}\n                    />\n                )}\n                {radialAxisEnd && (\n                    <RadialAxis\n                        type=\"end\"\n                        center={center}\n                        angle={Math.max(startAngle, endAngle)}\n                        scale={radiusScale}\n                        {...radialAxisEnd}\n                    />\n                )}\n                {circularAxisInner && (\n                    <CircularAxis\n                        type=\"inner\"\n                        center={center}\n                        radius={innerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisInner}\n                    />\n                )}\n                {circularAxisOuter && (\n                    <CircularAxis\n                        type=\"outer\"\n                        center={center}\n                        radius={outerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisOuter}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('tracks') && enableTracks) {\n        layerById.tracks = (\n            <RadialBarTracks\n                key=\"tracks\"\n                center={center}\n                tracks={tracks}\n                arcGenerator={arcGenerator}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <RadialBarArcs<D>\n                key=\"bars\"\n                center={center}\n                bars={bars}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                arcGenerator={arcGenerator}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabels) {\n        layerById.labels = (\n            <ArcLabelsLayer<ComputedBar<D>>\n                key=\"labels\"\n                center={center}\n                data={bars}\n                label={label}\n                radiusOffset={labelsRadiusOffset}\n                skipAngle={labelsSkipAngle}\n                textColor={labelsTextColor}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const RadialBar = <D extends RadialBarDatum = RadialBarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadialBarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadialBar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadialBarDatum, RadialBarSvgProps } from './types'\nimport { RadialBar } from './RadialBar'\n\nexport const ResponsiveRadialBar = <D extends RadialBarDatum = RadialBarDatum>(\n    props: Omit<RadialBarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <RadialBar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["commonDefaultProps","maxValue","layers","startAngle","endAngle","innerRadius","padding","padAngle","cornerRadius","enableTracks","tracksColor","enableRadialGrid","enableCircularGrid","radialAxisStart","radialAxisEnd","circularAxisInner","circularAxisOuter","colors","scheme","borderWidth","borderColor","from","modifiers","enableLabels","label","labelsSkipAngle","labelsRadiusOffset","labelsTextColor","theme","isInteractive","tooltip","bar","_jsx","BasicTooltip","enableChip","id","_jsxs","category","groupId","value","formattedValue","color","legends","animate","motionConfig","transitionMode","renderWrapper","svgDefaultProps","useRadialBar","data","maxValueDirective","valueFormat","innerRadiusRatio","width","height","center","useMemo","outerRadius","Math","min","getColor","useOrdinalColorScale","result","serieIds","categories","groups","forEach","serie","push","groupTotalValue","datum","includes","x","y","total","max","map","group","valueScale","castLinearScale","scaleLinear","domain","range","radiusScale","castBandScale","scaleBand","arcGenerator","d3Arc","d","degreesToRadians","formatValue","useValueFormatter","bars","innerBars","currentValue","arcInnerRadius","arcOuterRadius","bandwidth","stackedValue","computedDatum","arc","startAngleRadians","endAngleRadians","tracks","getScaleTicks","trackRadius","legendData","barWithCategory","find","undefined","customLayerProps","RadialBarArcs","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","useCallback","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","RadialBarTracks","InnerRadialBar","originalStartAngle","originalEndAngle","partialMargin","margin","role","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","clampArc","layerById","grid","labels","Fragment","PolarGrid","angleScale","RadialAxis","type","angle","scale","CircularAxis","radius","ArcLabelsLayer","radiusOffset","skipAngle","textColor","length","legend","i","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","RadialBar","otherProps","Container","props","ResponsiveWrapper"],"mappings":"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"}