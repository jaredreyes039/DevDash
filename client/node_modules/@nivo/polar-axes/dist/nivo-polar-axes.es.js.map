{"version":3,"file":"nivo-polar-axes.es.js","sources":["../src/CircularAxisTick.tsx","../src/CircularAxis.tsx","../src/RadialGrid.tsx","../src/CircularGrid.tsx","../src/PolarGrid.tsx","../src/RadialAxisTick.tsx","../src/RadialAxis.tsx"],"sourcesContent":["import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CircularAxisTickProps } from './types'\n\nexport const CircularAxisTick = ({ label, animated: animatedProps }: CircularAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={animatedProps.opacity}>\n            <animated.line\n                x1={animatedProps.x1}\n                y1={animatedProps.y1}\n                x2={animatedProps.x2}\n                y2={animatedProps.y2}\n                style={theme.axis.ticks.line}\n            />\n            <animated.text\n                dx={animatedProps.textX}\n                dy={animatedProps.textY}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n                textAnchor=\"middle\"\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, SVGProps, useMemo } from 'react'\nimport { useSpring, useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\nimport { CircularAxisConfig, CircularAxisTickAnimatedProps } from './types'\nimport { CircularAxisTick } from './CircularAxisTick'\n\ntype CircularAxisProps = {\n    type: 'inner' | 'outer'\n    center?: [number, number]\n    radius: number\n    startAngle: number\n    endAngle: number\n    scale: AnyScale\n} & CircularAxisConfig\n\nconst getLinePositions = (angle: number, innerRadius: number, outerRadius: number) => {\n    const start = positionFromAngle(degreesToRadians(angle), innerRadius)\n    const end = positionFromAngle(degreesToRadians(angle), outerRadius)\n\n    return {\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y,\n    }\n}\n\nconst getTextPosition = (angle: number, radius: number) => {\n    const position = positionFromAngle(degreesToRadians(angle), radius)\n\n    return {\n        textX: position.x,\n        textY: position.y,\n    }\n}\n\nexport const CircularAxis = ({\n    type,\n    center = [0, 0],\n    radius,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 12,\n    tickComponent = CircularAxisTick,\n}: CircularAxisProps) => {\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const theme = useTheme()\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const spring = useSpring<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>({\n        radius,\n        startAngle,\n        endAngle,\n        opacity: 1,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => ({\n            key: index,\n            label: value,\n            angle: scale(value) - 90,\n        }))\n    }, [scale])\n\n    const outerRadius = type === 'inner' ? radius - tickSize : radius + tickSize\n    const textRadius = type === 'inner' ? outerRadius - tickPadding : outerRadius + tickPadding\n\n    const transition = useTransition<typeof ticks[0], CircularAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        from: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        enter: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        update: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        leave: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <ArcLine\n                animated={spring}\n                {...(theme.axis.domain.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                fill=\"none\"\n            />\n            {transition((animatedProps, tick) =>\n                createElement(tickComponent, {\n                    key: tick.key,\n                    label: tick.label,\n                    animated: animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\n\ninterface PolarGridProps {\n    scale: AnyScale\n    ticks?: number | number[]\n    innerRadius: number\n    outerRadius: number\n}\n\nexport const RadialGrid = ({ scale, innerRadius, outerRadius }: PolarGridProps) => {\n    const theme = useTheme()\n\n    const angles = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((angleValue, index) => ({\n            id: index,\n            angle: scale(angleValue) - 90,\n        }))\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; angle: number },\n        { angle: number; opacity: number }\n    >(angles, {\n        keys: item => item.id,\n        initial: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        from: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        update: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, angle) => (\n                <animated.g\n                    key={angle.id}\n                    transform={style.angle.to(v => `rotate(${v})`)}\n                    opacity={style.opacity}\n                >\n                    <line\n                        x1={innerRadius}\n                        x2={outerRadius}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                </animated.g>\n            ))}\n        </>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\n\ninterface CircularGridProps {\n    scale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const CircularGrid = ({\n    scale,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n}: CircularGridProps) => {\n    const theme = useTheme()\n\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const radii = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let radius = scale(value) as number\n            if ('bandwidth' in scale) {\n                radius += scale.bandwidth() / 2\n            }\n\n            return {\n                id: index,\n                radius,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; radius: number },\n        { radius: number; startAngle: number; endAngle: number; opacity: number }\n    >(radii, {\n        keys: item => item.id,\n        initial: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        from: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        update: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, item) => (\n                <ArcLine\n                    key={item.id}\n                    animated={style}\n                    {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                    strokeOpacity={style.opacity}\n                    fill=\"none\"\n                />\n            ))}\n        </>\n    )\n}\n","import { AnyScale } from '@nivo/scales'\nimport { RadialGrid } from './RadialGrid'\nimport { CircularGrid } from './CircularGrid'\n\ninterface PolarGridProps {\n    center: [number, number]\n    enableRadialGrid: boolean\n    enableCircularGrid: boolean\n    angleScale: AnyScale\n    radiusScale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const PolarGrid = ({\n    center,\n    enableRadialGrid,\n    enableCircularGrid,\n    angleScale,\n    radiusScale,\n    startAngle,\n    endAngle,\n}: PolarGridProps) => {\n    const innerRadius = Math.min(...radiusScale.range())\n    const outerRadius = Math.max(...radiusScale.range())\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {enableRadialGrid && (\n                <RadialGrid\n                    scale={angleScale}\n                    innerRadius={innerRadius}\n                    outerRadius={outerRadius}\n                />\n            )}\n            {enableCircularGrid && (\n                <CircularGrid scale={radiusScale} startAngle={startAngle} endAngle={endAngle} />\n            )}\n        </g>\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { RadialAxisTickProps } from './types'\n\nexport const RadialAxisTick = ({\n    label,\n    textAnchor,\n    animated: animatedProps,\n}: RadialAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g\n            opacity={animatedProps.opacity}\n            transform={to(\n                [animatedProps.y, animatedProps.rotation],\n                (y, rotation) => `translate(${y}, 0) rotate(${rotation})`\n            )}\n        >\n            <animated.line x2={animatedProps.length} style={theme.axis.ticks.line} />\n            <animated.text\n                dx={animatedProps.textX}\n                textAnchor={textAnchor}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, normalizeAngle } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { RadialAxisConfig, RadialAxisTickAnimatedProps } from './types'\nimport { RadialAxisTick } from './RadialAxisTick'\n\ntype RadialAxisProps = {\n    type: 'start' | 'end'\n    center: [number, number]\n    angle: number\n    scale: AnyScale\n} & RadialAxisConfig\n\nexport const RadialAxis = ({\n    type,\n    center,\n    angle: rawAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation: extraRotation = 0,\n    tickComponent = RadialAxisTick,\n}: RadialAxisProps) => {\n    const angle = normalizeAngle(rawAngle)\n\n    let textAnchor: 'start' | 'end'\n    let lineX: number\n    let textX: number\n    let tickRotation: number\n\n    if (type === 'start') {\n        tickRotation = 90 + extraRotation\n        if (angle <= 90) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        } else if (angle < 270) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n            tickRotation -= 180\n        } else {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        }\n    } else {\n        tickRotation = 90 + extraRotation\n        if (angle < 90) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        } else if (angle < 270) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n            tickRotation -= 180\n        } else {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        }\n    }\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let position = scale(value) as number\n            if ('bandwidth' in scale) {\n                position += scale.bandwidth() / 2\n            }\n\n            return {\n                key: index,\n                label: value,\n                position,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const spring = useSpring<{ rotation: string }>({\n        rotation: rawAngle - 90,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const transition = useTransition<typeof ticks[0], RadialAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        from: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        enter: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        update: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        leave: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <animated.g transform={spring.rotation.to(value => `rotate(${value})`)}>\n                {transition((animatedProps, tick) =>\n                    createElement(tickComponent, {\n                        key: tick.key,\n                        label: tick.label,\n                        y: tick.position,\n                        textX,\n                        rotation: tickRotation,\n                        length: lineX,\n                        textAnchor,\n                        animated: animatedProps,\n                    })\n                )}\n            </animated.g>\n        </g>\n    )\n}\n"],"names":["CircularAxisTick","label","animatedProps","animated","theme","useTheme","_jsxs","g","opacity","_jsx","line","x1","y1","x2","y2","style","axis","ticks","text","dx","textX","dy","textY","dominantBaseline","textAnchor","getLinePositions","angle","innerRadius","outerRadius","start","positionFromAngle","degreesToRadians","end","x","y","getTextPosition","radius","position","CircularAxis","type","center","originalStartAngle","startAngle","originalEndAngle","endAngle","scale","tickSize","tickPadding","tickComponent","useMotionConfig","animate","springConfig","config","spring","useSpring","immediate","useMemo","getScaleTicks","map","value","index","key","textRadius","transition","useTransition","keys","tick","initial","from","enter","update","leave","transform","ArcLine","domain","fill","createElement","RadialGrid","angles","angleValue","id","item","to","v","grid","CircularGrid","radii","bandwidth","strokeOpacity","PolarGrid","enableRadialGrid","enableCircularGrid","angleScale","radiusScale","Math","min","range","max","RadialAxisTick","rotation","length","RadialAxis","lineX","tickRotation","rawAngle","extraRotation","normalizeAngle"],"mappings":"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"}